// main.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:demo/farm_connect_screen.dart';
import 'package:demo/screens/login_page.dart';
import 'package:demo/values/app_routes.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'firebase_options.dart'; // Generated by FlutterFire CLI
import 'splash_screen.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  // Hello 

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Firebase Auth Demo',
      theme: ThemeData(
        fontFamily: GoogleFonts.nunito().fontFamily,
        primarySwatch: Colors.blue,
      ),
      routes: AppRoutes.getRoutes(),
      home: const SplashScreenWrapper(),
    );
  }
}

class SplashScreenWrapper extends StatefulWidget {
  const SplashScreenWrapper({super.key});

  @override
  State<SplashScreenWrapper> createState() => _SplashScreenWrapperState();
}

class _SplashScreenWrapperState extends State<SplashScreenWrapper> {
  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
        stream: FirebaseAuth.instance.authStateChanges(),
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            return FutureBuilder<DocumentSnapshot>(
              future: FirebaseFirestore.instance
                  .collection('userProfile')
                  .doc(snapshot.data!.uid)
                  .get(),
              builder: (context, userProfileSnapshot) {
                if (userProfileSnapshot.connectionState ==
                    ConnectionState.done) {
                  if (userProfileSnapshot.hasData &&
                      userProfileSnapshot.data!.data() != null) {
                    var userData = userProfileSnapshot.data!.data() as Map<
                        String,
                        dynamic>;
                    String userType = userData['userType'] ?? '';


                    return FutureBuilder<DocumentSnapshot>(

                      // Nested FutureBuilder
                      future: FirebaseFirestore.instance
                          .collection(userType) // Use userType for collection
                          .doc(
                          snapshot.data!.uid) // Use uid from auth, not userData
                          .get(),

                      builder: (context, specificUserSnapshot) {

                        if (specificUserSnapshot.connectionState == ConnectionState.done) {
                          if (specificUserSnapshot.hasData && specificUserSnapshot.data!.exists) { // Check exists

                            bool isRegistered = specificUserSnapshot.data!['isRegistered'] ?? false;

                                WidgetsBinding.instance.addPostFrameCallback((_) async {
                                  await Future.delayed(const Duration(seconds: 3));

                                  if (isRegistered) {
                                    // Navigate to profile

                                    if (userType == 'Farmer') {
                                      Navigator.pushReplacementNamed(context, AppRoutes.farmer_profile, arguments: userType);
                                    } else if (userType == 'FCO') {

                                    } else if (userType == 'Buyer') {

                                    }

                                  } else {
                                    // Navigate to farmer_register

                                    if (userType == 'Farmer') {
                                      Navigator.pushReplacementNamed(context, AppRoutes.farmer_register, arguments: userType);
                                    } else if (userType == 'FCO') {

                                    } else if (userType == 'Buyer') {

                                    }
                                  }
                                });
                          } else {
                            // User profile exists but NOT in specific user type collection, navigate to farm_connect
                            Navigator.pushReplacementNamed(context, AppRoutes.farm_connect, arguments: userType);
                          }
                        }
                        // Splash while loading the specific user type document
                        return const SplashScreen(arg: 'exists');
                      },
                    );
                  }
                }
                // Splash while loading user profile
                return const SplashScreen(arg: 'exists');
              },
            );
          } else {
            // No user logged in, show regular SplashScreen
            return const SplashScreen();
          }
        }
    );
  }
}
